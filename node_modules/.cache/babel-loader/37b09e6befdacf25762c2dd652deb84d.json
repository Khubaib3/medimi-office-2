{"remainingRequest":"C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\src\\store\\modules\\department.js","dependencies":[{"path":"C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\src\\store\\modules\\department.js","mtime":1629352743390},{"path":"C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Deft/Desktop/medimi/medimi-office/src/store/modules/department.js"],"names":["isEmpty","api","state","departments","departmentHeads","secretaries","doctors","id","mutations","SET_DEPARTMENTS","payload","PUSH_NEW_DEPARTMENT","push","REMOVE_DEPARTMENT","index","findIndex","obj","splice","SET_HEADS","SET_SECRETARIES","SET_DOCTORS","SET_ID","actions","getDepartmentHeads","commit","rootState","get","hospital","department","Promise","reject","data","result","resolve","getDepartmentHead","getDepartmentSecretaries","getDepartmentSecretary","getDepartmentDoctors","getDepartmentDoctor","departmentId","doctorId","getDepartments","createNewDepartment","post","deleteDepartment","delete","editDepartment","put","console","log","namespaced"],"mappings":"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","sourcesContent":["import { isEmpty } from \"lodash\";\r\n// import localforage from 'localforage'\r\nimport api from \"../../services/api\";\r\n\r\nconst state = {\r\n  departments: [],\r\n  departmentHeads: [],\r\n  secretaries: [],\r\n  doctors: [],\r\n  id: null\r\n};\r\n\r\nconst mutations = {\r\n  SET_DEPARTMENTS(state, payload) {\r\n    state.departments = payload\r\n  },\r\n\r\n  PUSH_NEW_DEPARTMENT(state, payload) {\r\n    state.departments.push(payload)\r\n  },\r\n\r\n  REMOVE_DEPARTMENT(state, payload) {\r\n    let index = state.departments.findIndex(obj => obj.id == payload)\r\n    state.departments.splice(index, 1)\r\n  },\r\n\r\n  SET_HEADS(state, payload) {\r\n    state.departmentHeads = payload\r\n  },\r\n\r\n  SET_SECRETARIES(state, payload) {\r\n    state.secretaries = payload\r\n  },\r\n\r\n  SET_DOCTORS(state, payload) {\r\n    state.doctors = payload\r\n  },\r\n\r\n  SET_ID(state, payload) {\r\n    state.id = payload\r\n  }\r\n};\r\n\r\nconst actions = {\r\n\r\n  async getDepartmentHeads({ state, commit, rootState}, payload) {\r\n    try {\r\n      const department = await api.get(`/departmentHead/${rootState.hospital.hospital.id}/${payload}`)\r\n      if(!department) return Promise.reject(\"Error in getting department head\")\r\n      commit(\"SET_HEADS\", department.data.result)\r\n      return Promise.resolve(true)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async getDepartmentHead({ state, commit }, payload) {\r\n    try {\r\n      const department = await api.get(`/departmentHead/${payload.id}`)\r\n      if(!department) return Promise.reject(\"Error in getting department head\")\r\n      return Promise.resolve(department.data.result)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async getDepartmentSecretaries({ state, commit, rootState}, payload) {\r\n    try {\r\n      const department = await api.get(`/secretary/${rootState.hospital.hospital.id}/${payload}`)\r\n      if(!department) return Promise.reject(\"Error in getting department head\")\r\n      commit(\"SET_SECRETARIES\", department.data.result)\r\n      return Promise.resolve(true)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async getDepartmentSecretary({ state, commit, rootState}, payload) {\r\n    try {\r\n      const department = await api.get(`/secretary/${payload.id}`)\r\n      if(!department) return Promise.reject(\"Error in getting department head\")\r\n      return Promise.resolve(department.data.result)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async getDepartmentDoctors({ state, commit, rootState}, payload) {\r\n    try {\r\n      const department = await api.get(`/doctor/${rootState.hospital.hospital.id}/${payload}`)\r\n      if(!department) return Promise.reject(\"Error in getting department head\")\r\n      commit(\"SET_DOCTORS\", department.data.result)\r\n      return Promise.resolve(department.data.result)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async getDepartmentDoctor({ state, commit, rootState}, payload) {\r\n    try {\r\n      const department = await api.get(`/doctor/${rootState.hospital.hospital.id}/${payload.departmentId}/${doctorId}`)\r\n      if(!department) return Promise.reject(\"Error in getting department head\")\r\n      return Promise.resolve(department.data.result)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n  \r\n\r\n\r\n  async getDepartments({ state, commit, rootState }) {\r\n    try {\r\n      const departments = await api.get(`/department/${rootState.hospital.hospital.id}/dep/`)\r\n      if(!departments) return Promise.reject(\"Error in getting department Data\")\r\n      commit(\"SET_DEPARTMENTS\", departments.data.result)\r\n      return Promise.resolve(state.departments)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async createNewDepartment({ state, commit, rootState}, payload) {\r\n    try {\r\n      const department = await api.post(`/department/${rootState.hospital.hospital.id}/dep/`, payload)\r\n      if(!department) return Promise.reject(\"Error in creating department\")\r\n      commit(\"PUSH_NEW_DEPARTMENT\", department.data.result)\r\n      return Promise.resolve(department.data.result)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async deleteDepartment({ state, commit, rootState}, payload) {\r\n    try {\r\n      const department = await api.delete(`/department/${rootState.hospital.hospital.id}/dep/${payload}`)\r\n      if(!department) return Promise.reject(\"Error in deleting department\")\r\n      commit(\"REMOVE_DEPARTMENT\", payload)\r\n      return Promise.resolve(true)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n\r\n  async editDepartment({ state, commit, rootState}, payload) {\r\n    try {\r\n      const { id, data } = payload \r\n      const department = await api.put(`/department/${rootState.hospital.hospital.id}/dep/${id}`, data)\r\n      if(!department) return Promise.reject(\"Error in deleting department\")\r\n      commit(\"REMOVE_DEPARTMENT\", id)\r\n      console.log(department.data.result)\r\n      commit(\"PUSH_NEW_DEPARTMENT\", department.data.result)\r\n      return Promise.resolve(true)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n};\r\n"]}]}