{"remainingRequest":"C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\src\\store\\modules\\patient.js","dependencies":[{"path":"C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\src\\store\\modules\\patient.js","mtime":1629816712833},{"path":"C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Deft\\Desktop\\medimi\\medimi-office\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L1VzZXJzL0RlZnQvRGVza3RvcC9tZWRpbWkvbWVkaW1pLW9mZmljZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIjsKaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gImxvZGFzaCI7IC8vIGltcG9ydCBsb2NhbGZvcmFnZSBmcm9tICdsb2NhbGZvcmFnZScKCmltcG9ydCBhcGkgZnJvbSAiLi4vLi4vc2VydmljZXMvYXBpIjsKdmFyIHN0YXRlID0gewogIGJvZHk6IG51bGwsCiAgaWQ6IG51bGwKfTsKdmFyIG11dGF0aW9ucyA9IHsKICBTRVRfQk9EWTogZnVuY3Rpb24gU0VUX0JPRFkoc3RhdGUsIHBheWxvYWQpIHsKICAgIHN0YXRlLmJvZHkgPSBwYXlsb2FkOwogIH0sCiAgU0VUX0lEOiBmdW5jdGlvbiBTRVRfSUQoc3RhdGUsIHBheWxvYWQpIHsKICAgIHN0YXRlLmlkID0gcGF5bG9hZDsKICB9Cn07CnZhciBhY3Rpb25zID0gewogIGFkZFBhdGllbnRCeVN0YWZmOiBmdW5jdGlvbiBhZGRQYXRpZW50QnlTdGFmZihfcmVmLCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgc3RhdGUsIGNvbW1pdCwgcmVzdWx0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlLCBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICBjb21taXQoIlNFVF9CT0RZIiwgcGF5bG9hZCk7CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGFwaS5wb3N0KCcvcGF0aWVudC9hZGRQYXRpZW50QnlTdGFmZicsIHN0YXRlLmJvZHkpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdCgiRXJyb3IgaW4gYWRkaW5nIFBhdGllbnQiKSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC5kYXRhLnJlc3VsdCkpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dC50MCk7CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDExXV0pOwogICAgfSkpKCk7CiAgfSwKICBzZWFyY2hCeUlkOiBmdW5jdGlvbiBzZWFyY2hCeUlkKF9yZWYyLCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIHN0YXRlLCBjb21taXQsIHRtcElkLCByZXN1bHQ7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmMi5zdGF0ZSwgY29tbWl0ID0gX3JlZjIuY29tbWl0OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTsKICAgICAgICAgICAgICBjb21taXQoIlNFVF9JRCIsIHBheWxvYWQuaWQpOwogICAgICAgICAgICAgIHRtcElkID0gc3RhdGUuaWQuc3BsaXQoJ1AnKTsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIGFwaS5nZXQoIi9wYXRpZW50LyIuY29uY2F0KHRtcElkWzFdKSk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KCJFcnJvciBpbiBmaW5kaW5nIFBhdGllbnQiKSk7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZShyZXN1bHQuZGF0YS5yZXN1bHQpKTsKCiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxMjsKICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KF9jb250ZXh0Mi50MCkpOwoKICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzEsIDEyXV0pOwogICAgfSkpKCk7CiAgfSwKICBnZXREZXBhcnRtZW50UGF0aWVudHM6IGZ1bmN0aW9uIGdldERlcGFydG1lbnRQYXRpZW50cyhfcmVmMywgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgIHZhciBzdGF0ZSwgY29tbWl0LCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWYzLnN0YXRlLCBjb21taXQgPSBfcmVmMy5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxOwogICAgICAgICAgICAgIGNvbW1pdCgiU0VUX0lEIiwgcGF5bG9hZC5pZCk7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBhcGkuZ2V0KCIvcGF0aWVudC9kZXBhcnRtZW50LyIuY29uY2F0KHBheWxvYWQuaWQpKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgICBpZiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KCJFcnJvciBpbiBmaW5kaW5nIFBhdGllbnQiKSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVzb2x2ZShyZXNwb25zZS5kYXRhLnJlc3VsdCkpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDExOwogICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgxKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgUHJvbWlzZS5yZWplY3QoX2NvbnRleHQzLnQwKSk7CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTMsIG51bGwsIFtbMSwgMTFdXSk7CiAgICB9KSkoKTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBzdGF0ZSwKICBtdXRhdGlvbnM6IG11dGF0aW9ucywKICBhY3Rpb25zOiBhY3Rpb25zCn07"},{"version":3,"sources":["C:/Users/Deft/Desktop/medimi/medimi-office/src/store/modules/patient.js"],"names":["isEmpty","api","state","body","id","mutations","SET_BODY","payload","SET_ID","actions","addPatientByStaff","commit","post","result","Promise","reject","resolve","data","searchById","tmpId","split","get","getDepartmentPatients","response","namespaced"],"mappings":";;;;;AAAA,SAASA,OAAT,QAAwB,QAAxB,C,CACA;;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAE,IADM;AAEZC,EAAAA,EAAE,EAAE;AAFQ,CAAd;AAKA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,QADgB,oBACPJ,KADO,EACAK,OADA,EACS;AACvBL,IAAAA,KAAK,CAACC,IAAN,GAAaI,OAAb;AACD,GAHe;AAKhBC,EAAAA,MALgB,kBAKTN,KALS,EAKFK,OALE,EAKO;AACrBL,IAAAA,KAAK,CAACE,EAAN,GAAWG,OAAX;AACD;AAPe,CAAlB;AAWA,IAAME,OAAO,GAAG;AAGRC,EAAAA,iBAHQ,mCAG6BH,OAH7B,EAGsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1BL,cAAAA,KAA0B,QAA1BA,KAA0B,EAAnBS,MAAmB,QAAnBA,MAAmB;AAClDA,cAAAA,MAAM,CAAC,UAAD,EAAaJ,OAAb,CAAN;AADkD;AAAA;AAAA,qBAG3BN,GAAG,CAACW,IAAJ,CAAS,4BAAT,EAAuCV,KAAK,CAACC,IAA7C,CAH2B;;AAAA;AAG1CU,cAAAA,MAH0C;;AAAA,kBAI5CA,MAJ4C;AAAA;AAAA;AAAA;;AAAA,+CAI7BC,OAAO,CAACC,MAAR,CAAe,yBAAf,CAJ6B;;AAAA;AAAA,+CAKzCD,OAAO,CAACE,OAAR,CAAgBH,MAAM,CAACI,IAAP,CAAYJ,MAA5B,CALyC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASnD,GAZa;AAcRK,EAAAA,UAdQ,6BAcsBX,OAdtB,EAc+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1BL,cAAAA,KAA0B,SAA1BA,KAA0B,EAAnBS,MAAmB,SAAnBA,MAAmB;AAAA;AAEzCA,cAAAA,MAAM,CAAC,QAAD,EAAWJ,OAAO,CAACH,EAAnB,CAAN;AACIe,cAAAA,KAHqC,GAG7BjB,KAAK,CAACE,EAAN,CAASgB,KAAT,CAAe,GAAf,CAH6B;AAAA;AAAA,qBAIpBnB,GAAG,CAACoB,GAAJ,oBAAoBF,KAAK,CAAC,CAAD,CAAzB,EAJoB;;AAAA;AAInCN,cAAAA,MAJmC;;AAAA,kBAKrCA,MALqC;AAAA;AAAA;AAAA;;AAAA,gDAKtBC,OAAO,CAACC,MAAR,CAAe,0BAAf,CALsB;;AAAA;AAAA,gDAMlCD,OAAO,CAACE,OAAR,CAAgBH,MAAM,CAACI,IAAP,CAAYJ,MAA5B,CANkC;;AAAA;AAAA;AAAA;AAAA,gDAQlCC,OAAO,CAACC,MAAR,cARkC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU5C,GAxBa;AA0BRO,EAAAA,qBA1BQ,wCA0BiCf,OA1BjC,EA0B0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1BL,cAAAA,KAA0B,SAA1BA,KAA0B,EAAnBS,MAAmB,SAAnBA,MAAmB;AAAA;AAEpDA,cAAAA,MAAM,CAAC,QAAD,EAAWJ,OAAO,CAACH,EAAnB,CAAN;AAFoD;AAAA,qBAG7BH,GAAG,CAACoB,GAAJ,+BAA+Bd,OAAO,CAACH,EAAvC,EAH6B;;AAAA;AAG9CmB,cAAAA,QAH8C;;AAAA,kBAIhDA,QAJgD;AAAA;AAAA;AAAA;;AAAA,gDAI/BT,OAAO,CAACC,MAAR,CAAe,0BAAf,CAJ+B;;AAAA;AAAA,gDAK7CD,OAAO,CAACE,OAAR,CAAgBO,QAAQ,CAACN,IAAT,CAAcJ,MAA9B,CAL6C;;AAAA;AAAA;AAAA;AAAA,gDAO7CC,OAAO,CAACC,MAAR,cAP6C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASvD;AAnCa,CAAhB;AA0CA,eAAe;AACbS,EAAAA,UAAU,EAAE,IADC;AAEbtB,EAAAA,KAAK,EAALA,KAFa;AAGbG,EAAAA,SAAS,EAATA,SAHa;AAIbI,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import { isEmpty } from \"lodash\";\r\n// import localforage from 'localforage'\r\nimport api from \"../../services/api\";\r\n\r\nconst state = {\r\n  body: null,\r\n  id: null\r\n};\r\n\r\nconst mutations = {\r\n  SET_BODY(state, payload) {\r\n    state.body = payload;\r\n  },\r\n\r\n  SET_ID(state, payload) {\r\n    state.id = payload;\r\n  },\r\n\r\n};\r\n\r\nconst actions = {\r\n\r\n\r\n  async addPatientByStaff({ state, commit }, payload) {\r\n    commit(\"SET_BODY\", payload);\r\n    try {\r\n      const result = await api.post('/patient/addPatientByStaff', state.body)\r\n      if(!result) return Promise.reject(\"Error in adding Patient\")\r\n      return Promise.resolve(result.data.result)\r\n    } catch (error) {\r\n      return error\r\n    }\r\n  },\r\n\r\n  async searchById({ state, commit }, payload) {\r\n    try {\r\n      commit(\"SET_ID\", payload.id)\r\n      let tmpId = state.id.split('P')\r\n      const result = await api.get(`/patient/${tmpId[1]}`)\r\n      if(!result) return Promise.reject(\"Error in finding Patient\")\r\n      return Promise.resolve(result.data.result)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  },\r\n\r\n  async getDepartmentPatients({ state, commit }, payload) {\r\n    try {\r\n      commit(\"SET_ID\", payload.id)\r\n      const response = await api.get(`/patient/department/${payload.id}`)\r\n      if(!response) return Promise.reject(\"Error in finding Patient\")\r\n      return Promise.resolve(response.data.result)\r\n    } catch (error) {\r\n      return Promise.reject(error)\r\n    }\r\n  },\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n};\r\n"]}]}